daemon off;
user root;

# error / warn
error_log stderr error;
error_log /tmp/nginx-error.log crit;

worker_processes 1;
events {
    worker_connections 4096;
}

rtmp {
    server {
        # TCP Options
        # Keep Alive = Idle Time : Interval : Retries
        # Idle = seconds after last ACK was not responded
        # Interval = Time between checks
        # Retries = Number of attempts
        # listen 1935 so_keepalive=10s:5:3;

        listen 1935;
        idle_streams off;
        chunk_size 4096;

        # ping 30s;
        # ping_timeout 5s;
        # drop_idle_publisher 15s;
        # timeout             15s;

        # RTMP Live Ingestion
        application live {
            live on;
            idle_streams off;
            drop_idle_publisher 15s;

            on_publish http://api-server:3000/stream/authorize;
            on_publish_done http://api-server:3000/stream/end;

            # record flv archives
            recorder archive {
                record all manual;
                record_path /archives/rec;
                record_suffix _archive_%y.%m.%d.flv;
                record_unique on;
                record_append off;
                record_notify on;
            }

            # make thumbnails
            recorder preview {
                record keyframes;
                record_max_frames 1;
                record_path /tmp/preview;
                record_interval 60s;

                exec_record_done /usr/local/bin/ffmpeg
                    -i $path
                    -vframes 1
                    -y /tmp/preview/$name.jpg;
                    # -an
                    # -f rawvideo
                    # -s 640x360 # see if disabling scaling reduces CPU
            }
        }

        # Create HLS stream
        application hls {
            allow 172.16.0.0/12;
            deny all;

            live on;
            hls on;
            hls_type live;
            # hls_datetime system;
            hls_playlist_length 60s;
            hls_fragment 2s;
            hls_fragment_naming system;
            hls_fragment_slicing aligned;
            hls_nested on;
            hls_sync 1ms;
            hls_path /tmp/hls;

            # idle_streams off;

            on_publish http://api-server:3000/stream/publish;
        }

        # Create 144p Only Transcoded HLS Stream
        application transcode_144 {
            allow 172.16.0.0/12;
            deny all;

            live on;
            hls on;
            hls_type live;
            # hls_datetime system;
            hls_playlist_length 60s;
            hls_fragment 2s;
            hls_fragment_naming system;
            hls_fragment_slicing aligned;
            hls_nested on;
            hls_sync 1ms;
            hls_path /tmp/transcode_144;

            # idle_streams off;

            hls_variant _144 BANDWIDTH=100000,RESOLUTION=256x144;
            hls_variant _src BANDWIDTH=2048000,RESOLUTION=1280x720;

            on_publish http://api-server:3000/stream/transcode/publish;
            on_publish_done http://api-server:3000/stream/transcode/end;
        }

        # Create 480p Only Transcoded HLS Stream
        application transcode_480 {
            allow 172.16.0.0/12;
            deny all;

            live on;
            hls on;
            hls_type live;
            # hls_datetime system;
            hls_playlist_length 60s;
            hls_fragment 2s;
            hls_fragment_naming system;
            hls_fragment_slicing aligned;
            hls_nested on;
            hls_sync 1ms;
            hls_path /tmp/transcode_480;

            # idle_streams off;

            hls_variant _480 BANDWIDTH=448000,RESOLUTION=854x480;
            hls_variant _src BANDWIDTH=2048000,RESOLUTION=1280x720;

            on_publish http://api-server:3000/stream/transcode/publish;
            on_publish_done http://api-server:3000/stream/transcode/end;
        }

        # Create 144p & 480p Transcoded HLS Stream
        application transcode {
            allow 172.16.0.0/12;
            deny all;

            live on;
            hls on;
            hls_type live;
            # hls_datetime system;
            hls_playlist_length 60s;
            hls_fragment 2s;
            hls_fragment_naming system;
            hls_fragment_slicing aligned;
            hls_nested on;
            hls_sync 1ms;
            hls_path /tmp/transcode;

            # idle_streams off;

            hls_variant _144 BANDWIDTH=100000,RESOLUTION=256x144;
            hls_variant _480 BANDWIDTH=448000,RESOLUTION=854x480;
            hls_variant _src BANDWIDTH=2048000,RESOLUTION=1280x720;

            on_publish http://api-server:3000/stream/transcode/publish;
            on_publish_done http://api-server:3000/stream/transcode/end;
        }
    }
}

http {
    access_log off;
    sendfile off;
    tcp_nopush on;
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_types text/css application/javascript application/vnd.apple.mpegurl;

    server {
        listen 8080;
        root /bms-nginx-server/src/webserver/public;
        include /usr/local/nginx/conf/mime.types;

        location / {
            try_files $uri @node;
            add_header Access-Control-Allow-Origin * always;
            add_header Cache-Control no-cache;
        }

        location @node {
            add_header Access-Control-Allow-Origin * always;
            add_header Cache-Control no-cache;
            proxy_pass http://api-server:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
        }

        location /hls {
            log_not_found off;

            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin * always;
        }

        location /transcode {
            log_not_found off;

            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin * always;
        }

        location /preview {
            log_not_found off;

            types {
                image/jpeg jpg;
                image/png png;
            }
            root /tmp;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin * always;
        }

        location /rec {
            limit_rate 2000k;

            autoindex on;
            root /archives;
        }

        location = /ping {
            add_header Content-Type text/plain;
            return 200 "pong";
        }

        # These locations are http basic auth password protected
        location /stat {
            auth_basic "Admin Auth";
            auth_basic_user_file  /bms-nginx-server/creds/.htpasswd;

            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            auth_basic "Admin Auth";
            auth_basic_user_file  /bms-nginx-server/creds/.htpasswd;

            root /bms-nginx-server/src/conf/;
        }

        location /debug {
            auth_basic "Admin Auth";
            auth_basic_user_file  /bms-nginx-server/creds/.htpasswd;

            autoindex on;
        }
    }

    # Protected endpoints
    # Listens on an unexposed port and restricts IP to local docker containers
    # This prevents it from being called from external services
    # All calls to these endpoints must go through the API service
    # The API services requires & verifies ID tokens
    # This allows us to closely control who has access
    server {
        listen 5000;

        location /control {
            allow 172.16.0.0/12;
            deny all;

            rtmp_control all;

            # Enable CORS
            add_header Access-Control-Allow-Origin * always;
        }
    }
}
